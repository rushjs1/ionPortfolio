{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{\"U4+L\":function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,\"BlogPageModule\",(function(){return blog_module_BlogPageModule}));var common=__webpack_require__(\"ofXK\"),fesm2015_forms=__webpack_require__(\"3Pt+\"),ionic_angular=__webpack_require__(\"TEn/\"),router=__webpack_require__(\"tyNb\"),core=__webpack_require__(\"fXoL\");const routes=[{path:\"\",component:(()=>{class BlogPage{constructor(){}ngOnInit(){}}return BlogPage.ɵfac=function(t){return new(t||BlogPage)},BlogPage.ɵcmp=core.Ab({type:BlogPage,selectors:[[\"app-blog\"]],decls:312,vars:0,consts:[[\"color\",\"light\"],[\"color\",\"light\",\"routerLink\",\"/home\",\"slot\",\"start\",1,\"backBtn\"],[\"name\",\"arrow-undo-circle-outline\"],[\"color\",\"dark\"],[1,\"projCont\"],[\"color\",\"warning\"],[\"color\",\"secondary\"],[\"color\",\"success\"],[\"src\",\"../../assets/images/2.png\"],[\"src\",\"../../assets/images/1.png\"],[\"color\",\"primary\"],[\"color\",\"danger\"],[1,\"codeSnips1\"],[\"src\",\"../../assets/images/3.png\"],[\"src\",\"../../assets/images/4.png\"],[1,\"codeSnips2\"],[1,\"codeSnips3\"],[1,\"codeSnips4\"],[1,\"codeSnips5\"],[\"src\",\"../../assets/images/5.png\"],[\"src\",\"../../assets/images/6.png\"],[1,\"codeSnips6\"],[\"src\",\"../../assets/images/7.png\"],[\"src\",\"../../assets/images/8.png\"],[\"src\",\"../../assets/images/9.png\"],[\"src\",\"../../assets/images/10.png\"],[1,\"codeSnips7\"],[\"src\",\"../../assets/images/11.png\"]],template:function(rf,ctx){1&rf&&(core.Jb(0,\"ion-header\"),core.Jb(1,\"ion-toolbar\",0),core.Jb(2,\"ion-button\",1),core.Xb(3,\" Back \"),core.Hb(4,\"ion-icon\",2),core.Ib(),core.Jb(5,\"ion-title\",3),core.Xb(6,\"Projects\"),core.Ib(),core.Ib(),core.Ib(),core.Jb(7,\"ion-content\"),core.Jb(8,\"div\",4),core.Jb(9,\"h1\"),core.Jb(10,\"ion-label\",3),core.Xb(11,\"A \"),core.Jb(12,\"ion-label\",5),core.Xb(13,\"sensible\"),core.Ib(),core.Jb(14,\"ion-label\",6),core.Xb(15,\" Webpack\"),core.Ib(),core.Xb(16,\" setup using \"),core.Jb(17,\"ion-label\",7),core.Xb(18,\" Node.js\"),core.Ib(),core.Ib(),core.Ib(),core.Jb(19,\"h5\"),core.Hb(20,\"br\"),core.Hb(21,\"br\"),core.Xb(22,\" step 1.) Lets create some files \"),core.Hb(23,\"br\"),core.Hb(24,\"br\"),core.Hb(25,\"img\",8),core.Hb(26,\"br\"),core.Hb(27,\"br\"),core.Xb(28,\" Step 2.) Move the index.html, script.js, and styles.css into the \"),core.Jb(29,\"i\"),core.Xb(30,\"src\"),core.Ib(),core.Xb(31,\" directory we have just created. \"),core.Hb(32,\"br\"),core.Hb(33,\"br\"),core.Hb(34,\"img\",9),core.Hb(35,\"br\"),core.Hb(36,\"br\"),core.Xb(37,\" Step 4.) in your terminal run \"),core.Hb(38,\"br\"),core.Hb(39,\"br\"),core.Jb(40,\"ion-label\",10),core.Xb(41,\"npm init -y\"),core.Ib(),core.Hb(42,\"br\"),core.Hb(43,\"br\"),core.Xb(44,\" Step 5.) next lets generate our \"),core.Jb(45,\"ion-label\",7),core.Xb(46,\"node_modules\"),core.Ib(),core.Xb(47,\" by installing some dependencies necessary for our \"),core.Jb(48,\"ion-label\",6),core.Xb(49,\"webpack\"),core.Ib(),core.Xb(50,\" bundling. \"),core.Hb(51,\"br\"),core.Hb(52,\"br\"),core.Xb(53,\" - Some of these dependencies include babel( js compiler), port finder, webpack file loading dependencies, a web pack dev server and more. This tutorial will not go over them individually, however I suggest you search them and read up a bit on what they are doing as it is interesting and will help you understand how webpack works a bit better. \"),core.Hb(54,\"br\"),core.Xb(55,\" - Here is the list of dependencies, you may \"),core.Jb(56,\"ion-label\",11),core.Xb(57,\"copy and paste into your package.json file\"),core.Ib(),core.Xb(58,\" in the dependencies section. once you have copied them, simply run npm i , and all the inserted dependencies will install in one go. \"),core.Hb(59,\"br\"),core.Hb(60,\"br\"),core.Jb(61,\"ion-label\"),core.Jb(62,\"textarea\",12),core.Xb(63,'        \"dependencies\": { \"@babel/core\": \"^7.12.10\", \"@babel/preset-env\":\\n        \"^7.12.11\", \"babel-loader\": \"^8.2.2\", \"clean-webpack-plugin\": \"^3.0.0\",\\n        \"copy-webpack-plugin\": \"^7.0.0\", \"css-loader\": \"^5.0.1\", \"file-loader\":\\n        \"^6.2.0\", \"html-loader\": \"^1.3.2\", \"html-webpack-plugin\":\\n        \"^5.0.0-alpha.7\", \"mini-css-extract-plugin\": \"^1.3.5\",\\n        \"portfinder-sync\": \"0.0.2\", \"raw-loader\": \"^4.0.2\", \"style-loader\":\\n        \"^2.0.0\", \"webpack\": \"^5.18.0\", \"webpack-cli\": \"^4.4.0\",\\n        \"webpack-dev-server\": \"^3.11.2\", \"webpack-merge\": \"^5.7.3\" }\\n      '),core.Ib(),core.Ib(),core.Hb(64,\"br\"),core.Hb(65,\"br\"),core.Jb(66,\"ion-label\",10),core.Xb(67,\" npm install \"),core.Ib(),core.Hb(68,\"br\"),core.Hb(69,\"br\"),core.Xb(70,\" Step. 6.) lets create our \"),core.Jb(71,\"ion-label\",6),core.Xb(72,\"webpack\"),core.Ib(),core.Xb(73,\" files. \"),core.Hb(74,\"br\"),core.Hb(75,\"br\"),core.Hb(76,\"img\",13),core.Hb(77,\"br\"),core.Hb(78,\"br\"),core.Xb(79,\" Step 7.) move them into the \"),core.Jb(80,\"i\"),core.Xb(81,\"bundler \"),core.Ib(),core.Xb(82,\"folder. Your folders should look identical to this now. \"),core.Hb(83,\"br\"),core.Hb(84,\"br\"),core.Hb(85,\"img\",14),core.Hb(86,\"br\"),core.Hb(87,\"br\"),core.Xb(88,\" Step 8.) Lets start with our \"),core.Jb(89,\"ion-label\",6),core.Xb(90,\"webpack.dev.js\"),core.Ib(),core.Xb(91,\" File. This file is responsible for merging our webpack configurations(that we will later create) and grabbing our ip, using port finder sync to serve our project locally on the webpack-dev-server. Copy and paste the blue code below into your webpack.dev.js \"),core.Hb(92,\"br\"),core.Hb(93,\"br\"),core.Jb(94,\"ion-label\"),core.Jb(95,\"textarea\",15),core.Xb(96,\" \\n            const { merge } = require('webpack-merge')\\n            const commonConfiguration = require('./webpack.common.js')\\n            const ip = require('internal-ip')\\n            const portFinderSync = require('portfinder-sync')\\n            \\n            const infoColor = (_message) =>\\n            {\\n                return `\\\\u001b[1m\\\\u001b[34m${_message}\\\\u001b[39m\\\\u001b[22m`\\n            }\\n            \\n            module.exports = merge(\\n                commonConfiguration,\\n                {\\n                    mode: 'development',\\n                    devServer:\\n                    {\\n                        host: '0.0.0.0',\\n                        port: portFinderSync.getPort(8080),\\n                        contentBase: './dist',\\n                        watchContentBase: true,\\n                        open: true,\\n                        https: false,\\n                        useLocalIp: true,\\n                        disableHostCheck: true,\\n                        overlay: true,\\n                        noInfo: true,\\n                        after: function(app, server, compiler)\\n                        {\\n                            const port = server.options.port\\n                            const https = server.options.https ? 's' : ''\\n                            const localIp = ip.v4.sync()\\n                            const domain1 = `http${https}://${localIp}:${port}`\\n                            const domain2 = `http${https}://localhost:${port}`\\n                            \\n                            console.log(`Project running at:\\\\n  - ${infoColor(domain1)}\\\\n  - ${infoColor(domain2)}`)\\n                        }\\n                    }\\n                }\\n            )\\n            \\n        \"),core.Ib(),core.Ib(),core.Hb(97,\"br\"),core.Hb(98,\"br\"),core.Xb(99,\" Step 9.) Lets open the \"),core.Jb(100,\"ion-label\",6),core.Xb(101,\"webpack.prod.js\"),core.Ib(),core.Xb(102,\". Much like the dev.js file, this is also responsible for merging our configurations (still not created) , and initiates production mode by remove all files inside webpack's output.path directory, as well as all unused webpack assets after every successful rebuild. The clean-webpack-plugin is responsible for removing your build folder before building. \"),core.Hb(103,\"br\"),core.Hb(104,\"br\"),core.Xb(105,\" -Copy and paste the code into the \"),core.Jb(106,\"ion-label\",6),core.Xb(107,\"webpack.prod.js\"),core.Ib(),core.Hb(108,\"br\"),core.Hb(109,\"br\"),core.Jb(110,\"ion-label\"),core.Jb(111,\"textarea\",16),core.Xb(112,\"            const { merge } = require('webpack-merge')\\n            const commonConfiguration = require('./webpack.common.js')\\n            const { CleanWebpackPlugin } = require('clean-webpack-plugin')\\n            \\n            module.exports = merge(\\n                commonConfiguration,\\n                {\\n                    mode: 'production',\\n                    plugins:\\n                    [\\n                        new CleanWebpackPlugin()\\n                    ]\\n                }\\n            )\\n             \"),core.Ib(),core.Ib(),core.Hb(113,\"br\"),core.Hb(114,\"br\"),core.Xb(115,\" Step 10.) Lets make our webpack configuration! This is done in the \"),core.Jb(116,\"ion-label\",6),core.Xb(117,\"webpack.common.js\"),core.Ib(),core.Xb(118,\". So go ahead and open it up. This file is responsible for a lot, ill try to break it down briefly. In order to \"),core.Hb(119,\"br\"),core.Hb(120,\"br\"),core.Xb(121,\" -Using path, we can first specify and entry point for this new module we want to create and bundle. Additionally, we need to specify our output options, as well as our plugins. as you see in our output.path = path.resolve(__dirname, “../dist/) we are saying hey we want this new bundled module to be in a folder called dist and we want it in the root of our project folder. \"),core.Hb(122,\"br\"),core.Hb(123,\"br\"),core.Jb(124,\"ion-label\"),core.Jb(125,\"textarea\",17),core.Xb(126,\"module.exports = {\\n\\n            entry: path.resolve(__dirname, '../src/script.js'),\\n               output:\\n               {\\n                   filename: 'bundle.[contenthash].js',\\n                   path: path.resolve(__dirname, '../dist')\\n               },\\n               devtool: ‘source-map’,\\n               plugins: {}\\n           }\\n            \"),core.Ib(),core.Ib(),core.Hb(127,\"br\"),core.Hb(128,\"br\"),core.Xb(129,\" Our plugins will help load our files from our src folder, it will search inside to the spot that we point to and in our testing options we can specify in js what file types we would like to search for. If it finds the respective file type, ( in our case its .html, .js, .css, as well as assets such as .jpg, .png and so on), it include them in the bundle. \"),core.Hb(130,\"br\"),core.Hb(131,\"br\"),core.Xb(132,\" Htmlwebpackplugin and copywebpackplugin both take one object as a parameter to define where in our project to search. \"),core.Hb(133,\"br\"),core.Hb(134,\"br\"),core.Xb(135,\" Please ensure your entire \"),core.Jb(136,\"ion-label\",6),core.Xb(137,\"webpack.common.js\"),core.Ib(),core.Xb(138,\" is identical to the code below. \"),core.Hb(139,\"br\"),core.Hb(140,\"br\"),core.Jb(141,\"ion-label\"),core.Jb(142,\"textarea\",18),core.Xb(143,\" \\n            const CopyWebpackPlugin = require('copy-webpack-plugin')\\n            const HtmlWebpackPlugin = require('html-webpack-plugin')\\n            const MiniCSSExtractPlugin = require('mini-css-extract-plugin')\\n            const path = require('path')\\n            \\n            module.exports = {\\n                entry: path.resolve(__dirname, '../src/script.js'),\\n                output:\\n                {\\n                    filename: 'bundle.[contenthash].js',\\n                    path: path.resolve(__dirname, '../dist')\\n                },\\n                devtool: 'source-map',\\n                plugins:\\n                [\\n                    new CopyWebpackPlugin({\\n                        patterns: [\\n                            { from: path.resolve(__dirname, '../static') }\\n                        ]\\n                    }),\\n                    new HtmlWebpackPlugin({\\n                        template: path.resolve(__dirname, '../src/index.html'),\\n                        minify: true\\n                    }),\\n                    new MiniCSSExtractPlugin()\\n                ],\\n                module:\\n                {\\n                    rules:\\n                    [\\n                        // HTML\\n                        {\\n                            test: /\\\\.(html)$/,\\n                            use: ['html-loader']\\n                        },\\n            \\n                        // JS\\n                        {\\n                            test: /\\\\.js$/,\\n                            exclude: /node_modules/,\\n                            use:\\n                            [\\n                                'babel-loader'\\n                            ]\\n                        },\\n            \\n                        // CSS\\n                        {\\n                            test: /\\\\.css$/,\\n                            use:\\n                            [\\n                                MiniCSSExtractPlugin.loader,\\n                                'css-loader'\\n                            ]\\n                        },\\n            \\n                        // Images\\n                        {\\n                            test: /\\\\.(jpg|png|gif|svg)$/,\\n                            use:\\n                            [\\n                                {\\n                                    loader: 'file-loader',\\n                                    options:\\n                                    {\\n                                        outputPath: 'assets/images/'\\n                                    }\\n                                }\\n                            ]\\n                        },\\n            \\n                        // Fonts\\n                        {\\n                            test: /\\\\.(ttf|eot|woff|woff2)$/,\\n                            use:\\n                            [\\n                                {\\n                                    loader: 'file-loader',\\n                                    options:\\n                                    {\\n                                        outputPath: 'assets/fonts/'\\n                                    }\\n                                }\\n                            ]\\n                        }\\n                    ]\\n                }\\n            }\\n            \\n        \"),core.Ib(),core.Ib(),core.Hb(144,\"br\"),core.Hb(145,\"br\"),core.Xb(146,\" Step 11.) Add something to your \"),core.Jb(147,\"ion-label\",11),core.Xb(148,\"index.html\"),core.Ib(),core.Xb(149,\" to test. ** imprortant** no need to link js or css files into your index, webpack config will handle this. However, we do need to import our css into our js file like so. \"),core.Hb(150,\"br\"),core.Hb(151,\"br\"),core.Hb(152,\"img\",19),core.Hb(153,\"br\"),core.Hb(154,\"br\"),core.Hb(155,\"img\",20),core.Hb(156,\"br\"),core.Hb(157,\"br\"),core.Xb(158,\" Step 12.) To run locally, we need to use the webpack dev server. Lets open \"),core.Jb(159,\"ion-label\",7),core.Xb(160,\"package.json\"),core.Ib(),core.Xb(161,\" and write some scripts. The dev script will run our run our webpack dev server with our configurations defined in our \"),core.Jb(162,\"i\"),core.Jb(163,\"ion-label\",6),core.Xb(164,\"webpack.dev.js\"),core.Ib(),core.Ib(),core.Xb(165,\". Also, when we are ready to build, we can do run our build script. Finally, this will \"),core.Jb(166,\"ion-label\",11),core.Xb(167,\"bundle\"),core.Ib(),core.Xb(168,\" our files with our configurations defined in our \"),core.Jb(169,\"i\"),core.Jb(170,\"ion-label\",6),core.Xb(171,\"webpack.prod.js\"),core.Ib(),core.Ib(),core.Xb(172,\". \"),core.Hb(173,\"br\"),core.Hb(174,\"br\"),core.Jb(175,\"ion-label\"),core.Jb(176,\"textarea\",21),core.Xb(177,' \\n            \"scripts\": {\\n              \"build\": \"webpack --config ./bundler/webpack.prod.js\",\\n              \"dev\": \"webpack serve --config ./bundler/webpack.dev.js\"\\n            },\\n        '),core.Ib(),core.Ib(),core.Hb(178,\"br\"),core.Hb(179,\"br\"),core.Hb(180,\"img\",22),core.Hb(181,\"br\"),core.Hb(182,\"br\"),core.Xb(183,\" Step.13) To run our dev script for local development, simply open a new terminal and type in \"),core.Hb(184,\"br\"),core.Hb(185,\"br\"),core.Jb(186,\"ion-label\",10),core.Xb(187,\"npm run dev\"),core.Ib(),core.Hb(188,\"br\"),core.Hb(189,\"br\"),core.Xb(190,\" Step 14.) Now, if you look we have a compiling error. Something about it wanting something to be in there to look for maybe?? idk why, but if you add a \"),core.Jb(191,\"ion-label\",11),core.Xb(192,\".gitkeep \"),core.Ib(),core.Xb(193,\"file into your static folder it will be all set to go. \"),core.Hb(194,\"br\"),core.Hb(195,\"br\"),core.Hb(196,\"img\",23),core.Hb(197,\"br\"),core.Hb(198,\"br\"),core.Xb(199,\" You should now see this in your browser if nothing horrible has happened. \"),core.Hb(200,\"br\"),core.Hb(201,\"br\"),core.Hb(202,\"img\",24),core.Hb(203,\"br\"),core.Hb(204,\"br\"),core.Xb(205,\" When you are ready to be done, you can build and push to a server of choice. \"),core.Hb(206,\"br\"),core.Hb(207,\"br\"),core.Jb(208,\"i\"),core.Xb(209,\" After building, you should see a \"),core.Jb(210,\"strong\"),core.Xb(211,\"dist\"),core.Ib(),core.Xb(212,\" folder in your projects root, that will contain our bundled files!\"),core.Ib(),core.Hb(213,\"br\"),core.Hb(214,\"br\"),core.Hb(215,\"img\",25),core.Hb(216,\"br\"),core.Hb(217,\"br\"),core.Jb(218,\"h2\"),core.Xb(219,\" Lastly, I will show you how to push this project to \"),core.Jb(220,\"ion-label\",6),core.Xb(221,\" Heroku\"),core.Ib(),core.Xb(222,\". \"),core.Ib(),core.Hb(223,\"br\"),core.Hb(224,\"br\"),core.Xb(225,\" Step 15.) lets install express and add index.js file to our project root \"),core.Hb(226,\"br\"),core.Hb(227,\"br\"),core.Jb(228,\"ion-label\",10),core.Xb(229,\"npm i express\"),core.Ib(),core.Hb(230,\"br\"),core.Hb(231,\"br\"),core.Jb(232,\"ion-label\",10),core.Xb(233,\" 1> index.js\"),core.Ib(),core.Hb(234,\"br\"),core.Hb(235,\"br\"),core.Xb(236,\" Step 16.) Set up basic express server in our index.js in our projects root. \"),core.Hb(237,\"br\"),core.Hb(238,\"br\"),core.Jb(239,\"ion-label\"),core.Jb(240,\"textarea\",26),core.Xb(241,'            const express = require(\"express\");\\n            const path = require(\"path\");\\n            const port = process.env.PORT || 8080;\\n            const app = express();\\n            \\n            app.use(express.static(__dirname + \"/dist\"));\\n            \\n            app.get(\"/src/\", (req, res) => {\\n              res.sendFile(path.resolve(__dirname, \"index.html\"));\\n            });\\n            app.listen(port);\\n             '),core.Ib(),core.Ib(),core.Hb(242,\"br\"),core.Hb(243,\"br\"),core.Xb(244,\" Step 17.) Add these scripts to your package.json \"),core.Hb(245,\"br\"),core.Hb(246,\"br\"),core.Xb(247,' \"start\": \"node index.js\", \"heroku-postbuild\": \"webpack --config ./bundler/webpack.prod.js\" '),core.Hb(248,\"br\"),core.Hb(249,\"br\"),core.Xb(250,\" Your scripts should now look like this \"),core.Hb(251,\"br\"),core.Hb(252,\"br\"),core.Hb(253,\"img\",27),core.Hb(254,\"br\"),core.Hb(255,\"br\"),core.Jb(256,\"strong\"),core.Xb(257,\" ** NOTE: You need to run the build script one more time at this point\"),core.Ib(),core.Hb(258,\"br\"),core.Hb(259,\"br\"),core.Xb(260,\" Step 18.) login using heroku cli \"),core.Hb(261,\"br\"),core.Hb(262,\"br\"),core.Jb(263,\"ion-label\",10),core.Xb(264,\" heroku login\"),core.Ib(),core.Hb(265,\"br\"),core.Hb(266,\"br\"),core.Xb(267,\" Step 19.) Create a new heroku app using \"),core.Hb(268,\"br\"),core.Hb(269,\"br\"),core.Jb(270,\"ion-label\",10),core.Xb(271,\"heroku create\"),core.Ib(),core.Hb(272,\"br\"),core.Hb(273,\"br\"),core.Xb(274,\" Step 20.) initialize a new git repo with \"),core.Hb(275,\"br\"),core.Hb(276,\"br\"),core.Jb(277,\"ion-label\",10),core.Xb(278,\" git init\"),core.Ib(),core.Hb(279,\"br\"),core.Hb(280,\"br\"),core.Xb(281,\" on VS code , at this time you may be asked to add a \"),core.Jb(282,\"ion-label\",11),core.Xb(283,\".gitignore\"),core.Ib(),core.Xb(284,\" , go ahead and click yes. \"),core.Hb(285,\"br\"),core.Hb(286,\"br\"),core.Xb(287,\" Step 21.) retrieve the repo you just created and deploy. \"),core.Hb(288,\"br\"),core.Hb(289,\"br\"),core.Jb(290,\"ion-label\",10),core.Xb(291,\"heroku git:remote --a your-heroku-app-name\"),core.Ib(),core.Hb(292,\"br\"),core.Hb(293,\"br\"),core.Jb(294,\"ion-label\",10),core.Xb(295,\"git add .\"),core.Ib(),core.Hb(296,\"br\"),core.Hb(297,\"br\"),core.Jb(298,\"ion-label\",10),core.Xb(299,\" git commit -am “first” \"),core.Ib(),core.Hb(300,\"br\"),core.Hb(301,\"br\"),core.Jb(302,\"ion-label\",10),core.Xb(303,\" git push heroku master\"),core.Ib(),core.Hb(304,\"br\"),core.Hb(305,\"br\"),core.Jb(306,\"strong\"),core.Jb(307,\"h3\"),core.Xb(308,\" You should now see a link to your hosted site in your terminal. \"),core.Ib(),core.Ib(),core.Hb(309,\"br\"),core.Hb(310,\"br\"),core.Hb(311,\"br\"),core.Ib(),core.Ib(),core.Ib())},directives:[ionic_angular.i,ionic_angular.q,ionic_angular.b,ionic_angular.t,router.h,ionic_angular.j,ionic_angular.p,ionic_angular.h,ionic_angular.l],styles:[\".ion-color-newtan[_ngcontent-%COMP%]{--ion-color-base:var(--ion-color-newtan);--ion-color-base-rgb:var(--ion-color-newtan-rgb);--ion-color-contrast:var(--ion-color-newtan-contrast);--ion-color-contrast-rgb:var(--ion-color-newtan-contrast-rgb);--ion-color-shade:var(--ion-color-newtan-shade);--ion-color-tint:var(--ion-color-newtan-tint)}.ion-color-black[_ngcontent-%COMP%]{--ion-color-base:var(--ion-color-black);--ion-color-base-rgb:var(--ion-color-black-rgb);--ion-color-contrast:var(--ion-color-black-contrast);--ion-color-contrast-rgb:var(--ion-color-black-contrast-rgb);--ion-color-shade:var(--ion-color-black-shade);--ion-color-tint:var(--ion-color-black-tint)}.backBtn[_ngcontent-%COMP%]{--border-color:var(--ion-color-black)}.imgCont[_ngcontent-%COMP%]{align-items:center}.imgCont[_ngcontent-%COMP%], .projCont[_ngcontent-%COMP%]{display:flex;justify-content:center}.projCont[_ngcontent-%COMP%]{width:90%;flex-direction:row;flex-wrap:wrap;margin-left:4.5%}.codeSnips1[_ngcontent-%COMP%]{width:50%;height:5%}.codeSnips2[_ngcontent-%COMP%], .codeSnips3[_ngcontent-%COMP%]{width:50%;height:8%}.codeSnips4[_ngcontent-%COMP%]{width:50%;height:5%}.codeSnips5[_ngcontent-%COMP%]{width:50%;height:15%}.codeSnips6[_ngcontent-%COMP%]{width:50%;height:3%}.codeSnips7[_ngcontent-%COMP%]{width:50%;height:5%}@media only screen and (max-width:1070px){.projCont[_ngcontent-%COMP%]{width:90%;display:flex;justify-content:center;align-items:center;flex-direction:row;margin-left:4.5%}}@media only screen and (max-width:960px){.projCont[_ngcontent-%COMP%]{width:40%;display:flex;justify-content:center;align-items:center;flex-direction:row;flex-wrap:wrap;margin-left:32%}}@media only screen and (max-width:460px){.projCont[_ngcontent-%COMP%]{width:80%;display:flex;justify-content:center;align-items:center;flex-direction:row;flex-wrap:wrap;margin-left:10%}}\"]}),BlogPage})()}];let blog_routing_module_BlogPageRoutingModule=(()=>{class BlogPageRoutingModule{}return BlogPageRoutingModule.ɵmod=core.Eb({type:BlogPageRoutingModule}),BlogPageRoutingModule.ɵinj=core.Db({factory:function(t){return new(t||BlogPageRoutingModule)},imports:[[router.i.forChild(routes)],router.i]}),BlogPageRoutingModule})(),blog_module_BlogPageModule=(()=>{class BlogPageModule{}return BlogPageModule.ɵmod=core.Eb({type:BlogPageModule}),BlogPageModule.ɵinj=core.Db({factory:function(t){return new(t||BlogPageModule)},imports:[[common.b,fesm2015_forms.a,ionic_angular.r,blog_routing_module_BlogPageRoutingModule]]}),BlogPageModule})()}}]);","extractedComments":[]}